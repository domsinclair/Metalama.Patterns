// THIS FILE IS T4-GENERATED.
// To edit, go to ILogger.Generated.tt.
// To transform, run this: "C:\Program Files (x86)\Common Files\Microsoft Shared\TextTemplating\14.0\TextTransform.exe" ILogger.Generated.tt

<#@ Template debug="false" hostspecific="false" language="C#" #>
<#@ Output extension=".cs" #>
<#@ include file="Common.ttinclude" #>

using Flashtrace.Contexts;

namespace Flashtrace
{
	public partial interface ILogger
	{
	<#
    for (var i = 1; i <= 10; i++)
    {
#>

		/// <summary>
        /// Writes a custom log record with <#= i #> parameter<#= GetPlural( i ) #>.
        /// </summary>
		/// <param name="context">The context for which the message has to be written.</param>
        /// <param name="level">The severity of the record (e.g. <see cref="LogLevel.Info"/> or <see cref="LogLevel.Warning"/>).</param>
        /// <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
        /// <param name="recordKind">Kind of record.</param>
        /// <param name="exception">The <see cref="Exception"/> associated with the record, or <c>null</c>.</param>
        /// <param name="recordInfo">Information about the caller source code.</param>
		<#
        GenerateXmlDoc( i );
#>
	   void Write<<#= Repeat( "T{0}", i ) #>>( ILoggingContext context, LogLevel level, LogRecordKind recordKind, string text, <#= Repeat( "T{0} arg{0}", i ) #>, Exception exception, ref CallerInfo recordInfo  );


	<#
    }
#>	
	}
}