// THIS FILE IS T4-GENERATED.
// To edit, go to GenericLogger.tt.
// To transform, run this: "C:\Program Files (x86)\Common Files\Microsoft Shared\TextTemplating\14.0\TextTransform.exe" ILogger.Generated.tt

<#@ Template debug="false" hostspecific="false" language="C#" #>
<#@ Output extension=".cs" #>

using Flashtrace.Contexts;

namespace Flashtrace.Custom
{
	public partial interface ILogger
	{
	<# for ( int i = 1; i <= 10; i++ )
	{	#>

		/// <summary>
        /// Writes a custom log record with <#=i#> parameter<#=GetPlural(i)#>.
        /// </summary>
		/// <param name="context">The context for which the message has to be written.</param>
        /// <param name="level">The severity of the record (e.g. <see cref="LogLevel.Info"/> or <see cref="LogLevel.Warning"/>).</param>
        /// <param name="text">The text of the log record, including parameters (e.g. <c>Opening {Path} file {ShareMode} sharing mode</c>).</param>
        /// <param name="recordKind">Kind of record.</param>
        /// <param name="exception">The <see cref="Exception"/> associated with the record, or <c>null</c>.</param>
        /// <param name="recordInfo">Information about the caller source code.</param>
		<#GenerateXmlDoc(i);#>
	   void Write<<#=Repeat( "T{0}", i )#>>( ILoggingContext context, LogLevel level, LogRecordKind recordKind, string text, <#=Repeat( "T{0} arg{0}", i )#>, Exception exception, ref CallerInfo recordInfo  );


	<#
	}
	 #>
	
	
	}

	
	partial class NullLogger
	{
<# for ( int i = 1; i <= 10; i++ )
	{	#>

	    void ILogger.Write<<#=Repeat( "T{0}", i )#>>( ILoggingContext context, LogLevel level, LogRecordKind logRecordKind, string text, <#=Repeat( "T{0} arg{0}", i )#>, Exception exception, ref CallerInfo callerInfo )
        {
             EmitWarning( level );
        }

		<# }	#>
	}


	partial class LegacySourceLogger
	{
<# for ( int i = 1; i <= 10; i++ )
	{	#>

	    void ILogger.Write<<#=Repeat( "T{0}", i )#>>( ILoggingContext context, LogLevel level, LogRecordKind logRecordKind, string text, <#=Repeat( "T{0} arg{0}", i )#>, Exception exception,  ref CallerInfo callerInfo )
        {
			if ( this.IsEnabled( level ) )
			{
              this.WriteFormatted( context, level, logRecordKind, text, new object[] {  <#=Repeat( "arg{0}", i )#> }, exception );
			}
        }

		<# }	#>
	}

    
}


<#+
string Repeat( string format, int count )
{
	string s = "";
	for ( int i = 1; i <= count; i++ )
	{
		if ( i > 1 ) s += ", ";
		s += string.Format( format, i );
	}

	return s;
}

string GetPlural( int count )
{
	return count > 1 ? "s" : "";
}

void GenerateXmlDoc( int count )
{
	for ( int i = 1; i <= count; i++ )
	{
	#>
		/// <typeparam name="T<#=i#>">Type of the <#=i#>-th parameter.</typeparam>
		/// <param name="arg<#= i #>">Value of the <#=i#>-th parameter.</param>
	<#+
	}
}

#>
